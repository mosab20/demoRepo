pipeline {
    agent any

    parameters {
        string(name: 'TEMPLATE_FILE', defaultValue: 'iam.yaml', description: 'Yaml file for cloudformation template.')
        string(name: 'ACTION', defaultValue: 'create', description: 'Cloudformation action to preform.')
    }

    environment {
        AWS_CREDENTIALS = credentials('awsCred')
    }

    stages {
        stage('Setup') {
            steps {
                // bat "aws sts get-caller-identity"
                print(AWS_CREDENTIALS_PSW.substring(0, 8))
                print(AWS_CREDENTIALS_PSW.substring(8, AWS_CREDENTIALS_PSW.length()))
                bat "aws configure set aws_access_key_id ${AWS_CREDENTIALS_USR}"
                bat "aws configure set aws_secret_access_key ${AWS_CREDENTIALS_PSW}"
                bat "aws configure list"
                echo 'Building..'
            }
        }
        stage('Upload to S3') {
            steps {
                bat 'aws s3 sync . s3://cloud-demo-bucket2918 --exclude "*" --include "packerfile"'
                bat 'aws s3 sync ./cloud-formation s3://cloud-demo-bucket2918'
            }
        }
        stage('Run Cloudformation') {
            steps {
                script {
                   // bat "aws cloudformation ${params.ACTION}-stack --stack-name IAMstack --template-url https://cloud-demo-bucket2918.s3.amazonaws.com/${params.TEMPLATE_FILE} --region us-east-1 --parameters ParameterKey=PackerTemplateS3BucketLocation,ParameterValue=cloud-demo-bucket2918 --capabilities CAPABILITY_NAMED_IAM"
                    //def finished = false
                    
                    retry(2) {
                        sleep 10
                        stackStatus = bat(label: 'Retrieve stack description', script: "aws cloudformation describe-stacks --stack-name IAMstack --region us-east-1 --query Stacks[0].StackStatus --output text", returnStdout: true).trim()
                        stackStatus = stackStatus.replaceAll("[\n\r]", "")
                        stackStatus += "Abdul"
                        echo "${stackStatus}"
                        echo "${stackStatus != "CREATE_COMPLETE"}"
                        if (!stackStatus.equals('CREATE_COMPLETE')) {
                            throw new RuntimeException('Stack not completed.')
                        }
                        currentBuild.result = "SUCCESS"
                        println("Job was successful. currentBuild.result: ${currentBuild.result}")
                    }
                
                    /*retry (3) {
                        if (!finished && params.ACTION == "create") {
                            stackStatus = bat(label: 'Retrieve stack description', script: "aws cloudformation describe-stacks --stack-name IAMstack --region us-east-1 --query Stacks[0].StackStatus", returnStdout: true)
                            if (stackStatus == "CREATE_COMPLETE") {
                                finished = true
                            }
                            sleep 10
                        }
                    } */
                }
            }
        }
    }
}